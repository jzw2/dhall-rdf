#+title: Dhall RDF



A serialization language for RDF using [[https://dhall-lang.org/][Dhall]].


* Why


RDF has many serialization formats, such as json-ld and turtle, why add another one?

** Dhall is a programming language



Sometimes, you may have repetitive data. Since other serialization formats are not programming languages, your options are either to manually enter it, or use some adhoc tool to generate the data.

Although some serialization languages such as turtle have constructs which make the code more concise, this is restricted to what has been implemented in turtle. For instance, you cannot make an arbitrary variable.

With dhall, the configuration language itself allows you to generate the data, without relying on an external tool.

** Dhall is typed

Using OWL, classes and instances can be specified. However, the language itself does not check whether these are valid definitions. The class name could have a typo, and turtle will not complain.

Dhall is typed, and type checked. This can help prevent errors by asserting that classes will have certain guarantees.

Additionally, Dhall's type system is based on the calculus of contsructions, which allows for dependent types.




** Semantic hash

Dhall has a feature knows as semantic hash. If the framework is correctly used, it means that there is a quick way to compare if two ontologies are equal or not.

** Export to JSON

DHall easily exports to JSON, making it easy to use with applications that already support JSON-LD. If the user finds it too difficult to use DHall, they can always switch to JSON-LD.

* Example
#+begin_src dhall
 let map = https://prelude.dhall-lang.org/v11.1.0/List/map in
 let Map = https://prelude.dhall-lang.org/v15.0.0/Map/Type in
 let Pair = { left: Text, right: Text } in
 let TextOrMap  = < Text : Text | Map : Map Text Text > in
 let Triple = Map Text TextOrMap in
 let triple = \( subject : Text ) -> \( verb : Text) -> \( object : Text) ->
     [
        {
          mapKey = "@id",
          mapValue = TextOrMap.Text  subject
        },
        {
           mapKey = verb,  mapValue =
            TextOrMap.Map [
                {
                    mapKey = "@id",
                    mapValue = object
                }
            ]
        }
    ] in
let double = \( left : Text ) -> \( right: Text ) -> { left = left, right = right } in
let withSubject = \( subject : Text) -> \( pairs: List Pair) -> map Pair Triple (\( pred : Pair ) -> triple subject pred.left pred.right) pairs in
let withVerb = \( verb: Text ) -> \( list : List Text ) -> map Text Pair ( \( object : Text ) -> { left = verb, right = object } ) list in
let prefix = \(pre : Text) -> \(suf : Text) -> pre ++ suf in
let anonymous = \(pairs: List Pair ) -> "Anonymous" in
let uni = prefix  "http://uni-tuebingen.de/semanticWebClass/university#" in
let owl = prefix "http://www.w3.org/2002/07/owl#" in
let rdf = prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#" in
let rdfs = prefix "http://www.w3.org/1999/02/22-rdf-syntax-ns#" in
[
  triple (uni  "Human") (rdf  "type") (owl  "Class"),
  triple (uni  "UniversityPerson") (rdf  "type") (owl  "Class")

] #
   withSubject (uni  "hasFaculty") [
         double (rdf  "type") (owl  "ObjectProperty"),
         double (rdfs  "domain") (uni  "University"),
         double (rdfs  "range") (uni  "Faculty"),
         double (rdfs  "domain") (uni  "University"),
   ] #

   withSubject (uni  "TeachingAssistant") [
         double (rdf  "type") (owl  "Class"),
         double (owl  "equivalentClass") (anonymous
             (withVerb (owl "intersectionOf") [
                             uni "Teacher",
                            uni "Student" ]
)             ),
   ]
#+end_src


This will output

#+begin_src json

[
  {
    "@id": "http://uni-tuebingen.de/semanticWebClass/university#Human",
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": {
      "@id": "http://www.w3.org/2002/07/owl#Class"
    }
  },
  {
    "@id": "http://uni-tuebingen.de/semanticWebClass/university#UniversityPerson",
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": {
      "@id": "http://www.w3.org/2002/07/owl#Class"
    }
  },
  {
    "@id": "http://uni-tuebingen.de/semanticWebClass/university#hasFaculty",
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": {
      "@id": "http://www.w3.org/2002/07/owl#ObjectProperty"
    }
  },
  {
    "@id": "http://uni-tuebingen.de/semanticWebClass/university#hasFaculty",
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#domain": {
      "@id": "http://uni-tuebingen.de/semanticWebClass/university#University"
    }
  },
  {
    "@id": "http://uni-tuebingen.de/semanticWebClass/university#hasFaculty",
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#range": {
      "@id": "http://uni-tuebingen.de/semanticWebClass/university#Faculty"
    }
  },
  {
    "@id": "http://uni-tuebingen.de/semanticWebClass/university#hasFaculty",
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#domain": {
      "@id": "http://uni-tuebingen.de/semanticWebClass/university#University"
    }
  },
  {
    "@id": "http://uni-tuebingen.de/semanticWebClass/university#TeachingAssistant",
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": {
      "@id": "http://www.w3.org/2002/07/owl#Class"
    }
  },
  {
    "@id": "http://uni-tuebingen.de/semanticWebClass/university#TeachingAssistant",
    "http://www.w3.org/2002/07/owl#equivalentClass": {
      "@id": "Anonymous"
    }
  }
]
#+end_src


#+begin_src ttl
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

<http://uni-tuebingen.de/semanticWebClass/university#Human> a owl:Class .

<http://uni-tuebingen.de/semanticWebClass/university#TeachingAssistant> a owl:Class ;
    owl:equivalentClass <file:///Users/johnwang/org/code/Anonymous> .

<http://uni-tuebingen.de/semanticWebClass/university#UniversityPerson> a owl:Class .

<http://uni-tuebingen.de/semanticWebClass/university#hasFaculty> a owl:ObjectProperty ;
    rdf:domain <http://uni-tuebingen.de/semanticWebClass/university#University> ;
    rdf:range <http://uni-tuebingen.de/semanticWebClass/university#Faculty> .
#+end_src
